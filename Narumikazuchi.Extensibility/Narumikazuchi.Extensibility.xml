<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Narumikazuchi.Extensibility</name>
    </assembly>
    <members>
        <member name="T:Narumikazuchi.Extensibility.AddInAttribute">
            <summary>
            Marks a class as an AddIn.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.AddInAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Extensibility.AddInAttribute"/> class.
            </summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:Narumikazuchi.Extensibility.AddInAttribute.Name">
            <summary>
            Gets the internal name of the AddIn.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Extensibility.AddInAttribute.UniqueIdentifier">
            <summary>
            Gets the unique GUID of the AddIn.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Extensibility.AddInAttribute.Version">
            <summary>
            Gets the release version of the AddIn.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.AddInDefinitionEventArgs">
            <summary>
            Contains the <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> that is tied to the current event.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.AddInDefinitionEventArgs.#ctor(Narumikazuchi.Extensibility.IAddInDefinition)">
            <summary>
            Creates a new instance of the <see cref="T:Narumikazuchi.Extensibility.AddInDefinitionEventArgs"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:Narumikazuchi.Extensibility.AddInDefinitionEventArgs.AddIn">
            <summary>
            Gets the <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> that is tied to the event.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInNotBothTrustedConfigurator">
            <summary>
            Configures the action the store shall take, when the application tries to register a non-trusted AddIn.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotBothTrustedConfigurator.NotifyUserWhenNotSystemTrusted(System.Action{Narumikazuchi.Extensibility.IAddInDefinition})">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it notifies the user through the provided delegate about the inability to register the AddIn.
            </summary>
            <remarks>
            The provided delegate can be used to either inform the user about the failed action, log the failed action or
            do both or anything else that you need to happend after such an event.
            </remarks>
            <param name="notification">The delegate to call when the described event happens.</param>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotBothTrustedConfigurator.IgnoreWhenNotSystemTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it will basically silently fail the registration and continue on.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotBothTrustedConfigurator.FailWhenNotSystemTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotBothTrustedConfigurator.PromptUserWhenNotUserTrusted(System.Func{Narumikazuchi.Extensibility.IAddInDefinition,System.Boolean})">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "User-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotBothTrustedConfigurator.IgnoreWhenNotUserTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "User-Trusted"-list, 
            it will basically silently fail the registration and continue on.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotBothTrustedConfigurator.FailWhenNotUserTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "User-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInNotSystemTrustedConfigurator">
            <summary>
            Configures the action the store shall take, when the application tries to register a non-trusted AddIn.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotSystemTrustedConfigurator.NotifyUserWhenNotSystemTrusted(System.Action{Narumikazuchi.Extensibility.IAddInDefinition})">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it notifies the user through the provided delegate about the inability to register the AddIn.
            </summary>
            <remarks>
            The provided delegate can be used to either inform the user about the failed action, log the failed action or
            do both or anything else that you need to happend after such an event.
            </remarks>
            <param name="notification">The delegate to call when the described event happens.</param>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotSystemTrustedConfigurator.IgnoreWhenNotSystemTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it will basically silently fail the registration and continue on.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotSystemTrustedConfigurator.FailWhenNotSystemTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInNotUserTrustedConfigurator">
            <summary>
            Configures the action the store shall take, when the application tries to register a non-trusted AddIn.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotUserTrustedConfigurator.PromptUserWhenNotUserTrusted(System.Func{Narumikazuchi.Extensibility.IAddInDefinition,System.Boolean})">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotUserTrustedConfigurator.IgnoreWhenNotUserTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "User-Trusted"-list, 
            it will basically silently fail the registration and continue on.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInNotUserTrustedConfigurator.FailWhenNotUserTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "User-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInSystemConfiguredNotUserTrustedConfigurator">
            <summary>
            Configures the action the store shall take, when the application tries to register a non-trusted AddIn.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInSystemConfiguredNotUserTrustedConfigurator.PromptUserWhenNotUserTrusted(System.Func{Narumikazuchi.Extensibility.IAddInDefinition,System.Boolean})">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "User-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInSystemConfiguredNotUserTrustedConfigurator.IgnoreWhenNotUserTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "User-Trusted"-list, 
            it will basically silently fail the registration and continue on.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInSystemConfiguredNotUserTrustedConfigurator.FailWhenNotUserTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "User-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInSystemTrustOnlyListConfigurator">
            <summary>
            Configures which AddIns should be trusted.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInSystemTrustOnlyListConfigurator.ProvidingSystemTrustedAddIns(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Provides the store with a list of system-trusted AddIns.
            </summary>
            <param name="systemTrusted">The list of AddIns that the store will trust.</param>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInSystemTrustOnlyListConfiguratorOrFinalizer">
            <summary>
            Configures which AddIns should be trusted or finalizes the configuration.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInTrustBothListConfigurator">
            <summary>
            Configures which AddIns should be trusted.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustBothListConfigurator.ProvidingSystemTrustedAddIns(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Provides the store with a list of system-trusted AddIns.
            </summary>
            <param name="systemTrusted">The list of AddIns that the store will trust.</param>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustBothListConfigurator.ProvidingUserTrustedAddIns(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Provides the store with a list of user-trusted AddIns.
            </summary>
            <param name="userTrusted">The list of AddIns that the store will perceive as user-trusted.</param>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInTrustBothListConfiguratorOrFinalizer">
            <summary>
            Configures which AddIns should be trusted or finalizes the configuration.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInTrustFinalizer">
            <summary>
            Finalizes the configuration.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustFinalizer.Construct">
            <summary>
            Finalizes the configuration and returns an instance of the fully configured <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInUserConfiguredNotSystemTrustedConfigurator">
            <summary>
            Configures the action the store shall take, when the application tries to register a non-trusted AddIn.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInUserConfiguredNotSystemTrustedConfigurator.NotifyUserWhenNotSystemTrusted(System.Action{Narumikazuchi.Extensibility.IAddInDefinition})">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it notifies the user through the provided delegate about the inability to register the AddIn.
            </summary>
            <remarks>
            The provided delegate can be used to either inform the user about the failed action, log the failed action or
            do both or anything else that you need to happend after such an event.
            </remarks>
            <param name="notification">The delegate to call when the described event happens.</param>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInUserConfiguredNotSystemTrustedConfigurator.IgnoreWhenNotSystemTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it will basically silently fail the registration and continue on.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInUserConfiguredNotSystemTrustedConfigurator.FailWhenNotSystemTrusted">
            <summary>
            When the application tries to register an AddIn that is not in the supplied "System-Trusted"-list, 
            it will critically fail by throwing an exception.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInUserTrustOnlyListConfigurator">
            <summary>
            Configures which AddIns should be trusted.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInUserTrustOnlyListConfigurator.ProvidingUserTrustedAddIns(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Provides the store with a list of user-trusted AddIns.
            </summary>
            <param name="userTrusted">The list of AddIns that the store will perceive as user-trusted.</param>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInUserTrustOnlyListConfiguratorOrFinalizer">
            <summary>
            Configures which AddIns should be trusted or finalizes the configuration.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.CreateAddInStore">
            <summary>
            A builder class to build an <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> for your application.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.CreateAddInStore.TrustProvidedAddInsOnly">
            <summary>
            The store will only trust system-trusted AddIns, which are a fixed set of programmatically provided AddIns.
            </summary>
            <remarks>
            While there are certainly ways around it, this trust level is designed to not be dynamically
            influenceable by an end user. You might want to implement a way for administrators to easily alter the list,
            but it is highly discouraged to allow an end user such freedom.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Extensibility.CreateAddInStore.TrustUserApprovedAddInsOnly">
            <summary>
            The store will only trust user-trusted AddIns, which are a dynamic set of AddIns that are either dynamically loaded
            or manually approved by an end user.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.CreateAddInStore.TrustBothProvidedAndUserApprovedAddIns">
            <summary>
            The store will trust user-trusted AddIns as well as system-trusted AddIns.<para/>
            System-trusted AddIns are are a fixed set of programmatically provided AddIns.<para/>
            User-trusted AddIns are a dynamic set of AddIns that are either dynamically loaded
            or manually approved by an end user.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.CreateAddInStore.TrustAllAddIns">
            <summary>
            The store will trust any AddIn, regardless of it's origin.
            </summary>
            <remarks>
            This option is great if you are building an application where you are certain that only a controlled set of AddIns will be loaded.
            </remarks>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddIn">
            <summary>
            Represents the very basic functionality that an AddIn needs to implement for the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> to use it in a non-generic context.<para/>
            If you are building an AddIn for the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> be sure to not only implement this interface but also either the <see cref="T:Narumikazuchi.Extensibility.IAddIn`1"/>
            or <see cref="T:Narumikazuchi.Extensibility.IAddIn`2"/> interface. If you don't implement either the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> can't register your AddIn.
            </summary>
            <remarks>
            If create your own AddIn <see langword="interface"/>, <see langword="class"/> or <see langword="struct"/> 
            inherit from either <see cref="T:Narumikazuchi.Extensibility.IAddIn`1"/> or <see cref="T:Narumikazuchi.Extensibility.IAddIn`2"/>, since
            you won't be able to register them in the store otherwise.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddIn.Shutdown">
            <summary>
            Decouples every refence this instance holds and prepares it so the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> it's
            registred in can delete the reference to this instance.
            </summary>
            <remarks>
            This method will raise both the <see cref="E:Narumikazuchi.Extensibility.IAddIn.ShutdownInitiated"/> and <see cref="E:Narumikazuchi.Extensibility.IAddIn.ShutdownFinished"/> event, 
            unlike the <see cref="M:Narumikazuchi.Extensibility.IAddIn.SilentShutdown"/> method.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddIn.SilentShutdown">
            <summary>
            Decouples every refence this instance holds and prepares it so the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> it's
            registred in can delete the reference to this instance.
            </summary>
            <remarks>
            This method will NOT raise either the <see cref="E:Narumikazuchi.Extensibility.IAddIn.ShutdownInitiated"/> or <see cref="E:Narumikazuchi.Extensibility.IAddIn.ShutdownFinished"/> event, 
            unlike the <see cref="M:Narumikazuchi.Extensibility.IAddIn.Shutdown"/> method.
            </remarks>
        </member>
        <member name="E:Narumikazuchi.Extensibility.IAddIn.ShutdownInitiated">
            <summary>
            Occurs when the instance gets prepared to be deleted from the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/>.
            </summary>
        </member>
        <member name="E:Narumikazuchi.Extensibility.IAddIn.ShutdownFinished">
            <summary>
            Occurs right before the reference to the instance will get deleted from the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Extensibility.IAddIn.IsShuttingDown">
            <summary>
            Gets whether the <see cref="T:Narumikazuchi.Extensibility.IAddIn"/> is currently shutting down.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddIn`1">
            <summary>
            Represents the basic functionality that an AddIn needs to implement.
            </summary>
            <remarks>
            Remember to include &lt;PropertyGroup&gt; &lt;EnableDynamicLoading&gt;true&lt;/EnableDynamicLoading&gt; &lt;/PropertyGroup&gt;
            into the project file of your AddIn projects, since it can otherwise be difficult to load AddIns.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddIn`1.Activate">
            <summary>
            Initializes an instance of this object.
            </summary>
            <remarks>
            This method will get called from the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> to get a reference to this AddIn.
            </remarks>
            <returns>A reference to this AddIn</returns>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddIn`2">
            <summary>
            Represents the basic functionality that an AddIn needs to implement.
            </summary>
            <remarks>
            Remember to include &lt;PropertyGroup&gt; &lt;EnableDynamicLoading&gt;true&lt;/EnableDynamicLoading&gt; &lt;/PropertyGroup&gt;
            into the project file of your AddIn projects, since it can otherwise be difficult to load AddIns.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddIn`2.Activate(`1)">
            <summary>
            Initializes an instance of this object.
            </summary>
            <remarks>
            This method will get called from the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> to get a reference to this AddIn.
            </remarks>
            <param name="options">The options used to configure this AddIn for activation.</param>
            <returns>A reference to this AddIn</returns>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInActivator">
            <summary>
            Represents the functionality of an <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> to activate AddIns.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInActivator.CanAddInBeActivated(Narumikazuchi.Extensibility.IAddInDefinition)">
            <summary>
            Checks whether the AddIn that is described by the specified <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> can be activated in the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> with or without user prompt.
            </summary>
            <remarks>
            If the trust level of this <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> has been configured for only system-trusted,
            the method will ingore the possible result of user prompts and return <see langword="false"/> for AddIns that are not trusted.
            </remarks>
            <param name="addIn">The definition which describes the AddIn to register.</param>
            <returns><see langword="true"/> if the AddIn can be registered with or without user prompt; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInActivator.CanAddInBeActivated(System.Guid@)">
            <summary>
            Gets whether the AddIn that is described by the specified <see cref="T:System.Guid"/> can be activated in the <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> with or without user prompt.
            </summary>
            <remarks>
            If the trust level of this <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> has been configured for only system-trusted,
            the method will ingore the possible result of user prompts and return <see langword="false"/> for AddIns that are not trusted.
            </remarks>
            <param name="addInUniqueIdentifier">The guid of the AddIn to register.</param>
            <returns><see langword="true"/> if the AddIn can be registered with or without user prompt; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInActivator.IsAddInActive(Narumikazuchi.Extensibility.IAddInDefinition)">
            <summary>
            Checks whether the AddIn which is described by the specified <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> is currently active.
            </summary>
            <remarks>
            This method also returns <see langword="false"/> when the AddIn in question is not even registered yet.
            </remarks>
            <param name="addIn">The definition which the describes the AddIn to check.</param>
            <returns><see langword="true"/> if the AddIn is currently active; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInActivator.TryActivate(Narumikazuchi.Extensibility.IAddInDefinition,Narumikazuchi.Extensibility.IAddIn@)">
            <summary>
            Tries to activate the AddIn that is described by the specified <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> and returns an instance of <see cref="T:Narumikazuchi.Extensibility.IAddIn"/> that can be casted to your custom AddIn type.
            </summary>
            <param name="definition">The definition which describes the AddIn to activate.</param>
            <param name="addIn">The resulting instance of the AddIn.</param>
            <returns><see langword="true"/> if the AddIn was not previously activated; otherwise, <see langword="false"/></returns>
            <exception cref="T:System.InvalidCastException"/>
            <exception cref="T:Narumikazuchi.NotAllowed"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInActivator.TryActivate``1(Narumikazuchi.Extensibility.IAddInDefinition,``0,Narumikazuchi.Extensibility.IAddIn@)">
            <summary>
            Tries to activate the AddIn that is described by the specified <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> and returns an instance of <see cref="T:Narumikazuchi.Extensibility.IAddIn"/> that can be casted to your custom AddIn type.
            </summary>
            <param name="definition">The definition which describes the AddIn to activate.</param>
            <param name="options">The options that are needed to activate that AddIn.</param>
            <param name="addIn">The resulting instance of the AddIn.</param>
            <returns><see langword="true"/> if the AddIn was not previously activated; otherwise, <see langword="false"/></returns>
            <exception cref="T:System.InvalidCastException"/>
            <exception cref="T:Narumikazuchi.NotAllowed"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInActivator.TryActivate``1(Narumikazuchi.Extensibility.IAddInDefinition,``0@)">
            <summary>
            Tries to activate the AddIn that is described by the specified <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> and returns an instance of <see cref="T:Narumikazuchi.Extensibility.IAddIn"/> that can be casted to your custom AddIn type.
            </summary>
            <param name="definition">The definition which describes the AddIn to activate.</param>
            <param name="addIn">The resulting instance of the AddIn.</param>
            <returns><see langword="true"/> if the AddIn was not previously activated; otherwise, <see langword="false"/></returns>
            <exception cref="T:System.InvalidCastException"/>
            <exception cref="T:Narumikazuchi.NotAllowed"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInActivator.TryActivate``2(Narumikazuchi.Extensibility.IAddInDefinition,``1,``0@)">
            <summary>
            Tries to activate the AddIn that is described by the specified <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> and returns an instance of <see cref="T:Narumikazuchi.Extensibility.IAddIn"/> that can be casted to your custom AddIn type.
            </summary>
            <param name="definition">The definition which describes the AddIn to activate.</param>
            <param name="options">The options that are needed to activate that AddIn.</param>
            <param name="addIn">The resulting instance of the AddIn.</param>
            <returns><see langword="true"/> if the AddIn was not previously activated; otherwise, <see langword="false"/></returns>
            <exception cref="T:System.InvalidCastException"/>
            <exception cref="T:Narumikazuchi.NotAllowed"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInDefinition">
            <summary>
            Represents the main information of an AddIn.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Extensibility.IAddInDefinition.UniqueIdentifier">
            <summary>
            Gets the GUID of this AddIn.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Extensibility.IAddInDefinition.Name">
            <summary>
            Gets the name of this AddIn.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Extensibility.IAddInDefinition.Version">
            <summary>
            Gets the version number of this AddIn.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Extensibility.IAddInDefinition.AssemblyName">
            <summary>
            Gets the display name of the assembly where the type resides.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Extensibility.IAddInDefinition.TypeName">
            <summary>
            Gets the Fullname of the type.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInDiscoverer">
            <summary>
            Represents the functionality of an <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> to discover AddIns.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.IO.FileInfo)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="assembly">The assembly file to analyze.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.IO.FileInfo,System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="assembly">The assembly file to analyze.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.String)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="assemblyPath">The path to the assembly to analyze.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.String,System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="assemblyPath">The path to the assembly to analyze.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.Byte[])">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="rawAssembly">The raw bytes representing the assembly to analyze.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.Byte[],System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="rawAssembly">The raw bytes representing the assembly to analyze.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.IO.Stream)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="assemblyStream">The stream that contains the assembly to analyze.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.IO.Stream,System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="assemblyStream">The stream that contains the assembly to analyze.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.Reflection.Assembly)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="assembly">The assembly to analyze.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssembly(System.Reflection.Assembly,System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the specified assembly.
            </summary>
            <param name="assembly">The assembly to analyze.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Discovers all AddIns that are available in the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies to analyze.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies to analyze.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssemblies(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Discovers all AddIns that are available in the specified dll files.
            </summary>
            <param name="assemblyFiles">The files to search for AddIns.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified, paired with the path of their origin file</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.BadImageFormatException"/>
            <exception cref="T:System.IO.FileLoadException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssemblies(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the specified dll files.
            </summary>
            <param name="assemblyFiles">The files to search for AddIns.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified, paired with the path of their origin file</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.BadImageFormatException"/>
            <exception cref="T:System.IO.FileLoadException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssemblies(System.IO.DirectoryInfo)">
            <summary>
            Discovers all AddIns that are available in the dll files in the specified directory.
            </summary>
            <param name="directory">The directoy to search through.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified, paired with the path of their origin file</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.BadImageFormatException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileLoadException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssemblies(System.IO.DirectoryInfo,System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the dll files in the specified directory.
            </summary>
            <param name="directory">The directoy to search through.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified, paired with the path of their origin file</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.BadImageFormatException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileLoadException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssemblies(System.String)">
            <summary>
            Discovers all AddIns that are available in the dll files in the specified directory path.
            </summary>
            <param name="directoryPath">The path to the directoy to search through.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified, paired with the path of their origin file</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.BadImageFormatException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileLoadException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.DiscoverAddInsContainedInAssemblies(System.String,System.Boolean@)">
            <summary>
            Discovers all AddIns that are available in the dll files in the specified directory path.
            </summary>
            <param name="directoryPath">The path to the directoy to search through.</param>
            <param name="searchPrivateTypes">If set to <see langword="true"/> the method will include <see langword="internal"/> types in the search.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all AddIns that could be identified, paired with the path of their origin file</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.BadImageFormatException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileLoadException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInDiscoverer.IsAddInDiscovered(Narumikazuchi.Extensibility.IAddInDefinition)">
            <summary>
            Gets whether the AddIn described by the specified <see cref="T:Narumikazuchi.Extensibility.IAddInDefinition"/> is currently registered in any cache.
            </summary>
            <param name="addIn">The definition which describes the AddIn to request the registration status of.</param>
            <returns><see langword="true"/> if the AddIn is registered; otherwise, <see langword="false"/></returns>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInStore">
            <summary>
            This class is the core of the AddIn functionality. It caches known AddIns and only instantiates them once they are activated.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInStore.EnumerateActiveAddIns">
            <summary>
            Enumerates through the active AddIns. 
            </summary>
            <returns>An iterator that iterates over all active AddIns</returns>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInStore.EnumerateAllAddIns">
            <summary>
            Enumerates through the all AddIns. 
            </summary>
            <returns>An iterator that iterates over all active AddIns</returns>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInStore.EnumerateInactiveAddIns">
            <summary>
            Enumerates through the inactive AddIns. 
            </summary>
            <returns>An iterator that iterates over all active AddIns</returns>
        </member>
        <member name="E:Narumikazuchi.Extensibility.IAddInStore.AddInActivating">
            <summary>
            Occurs when an AddIn activation has begun.
            </summary>
        </member>
        <member name="E:Narumikazuchi.Extensibility.IAddInStore.AddInActivated">
            <summary>
            Occurs when an AddIn activation has finished.
            </summary>
        </member>
        <member name="E:Narumikazuchi.Extensibility.IAddInStore.AddInDiscovering">
            <summary>
            Occurs when the registering of an AddIn has begun.
            </summary>
        </member>
        <member name="E:Narumikazuchi.Extensibility.IAddInStore.AddInDiscovered">
            <summary>
            Occurs when the registering of an AddIn has finished.
            </summary>
        </member>
        <member name="E:Narumikazuchi.Extensibility.IAddInStore.AddInShuttingDown">
            <summary>
            Occurs when an AddIn shutdown has begun.
            </summary>
        </member>
        <member name="E:Narumikazuchi.Extensibility.IAddInStore.AddInShutdown">
            <summary>
            Occurs when an AddIn shutdown has finished.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Extensibility.IAddInTrustList">
            <summary>
            Represents the functionality of an <see cref="T:Narumikazuchi.Extensibility.IAddInStore"/> to manage a list of user trusted AddIns.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustList.ClearUserTrustedList">
            <summary>
            Clears the list of user trusted AddIns.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustList.ReadUserTrustedListFrom(System.IO.FileInfo)">
            <summary>
            Reads a list of user trusted addins from the specified file and adds them to the <see cref="T:Narumikazuchi.Extensibility.IAddInTrustList"/>.
            </summary>
            <param name="file">The file to read.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustList.ReadUserTrustedListFrom(System.String)">
            <summary>
            Reads a list of user trusted addins from the specified file and adds them to the <see cref="T:Narumikazuchi.Extensibility.IAddInTrustList"/>.
            </summary>
            <param name="filePath">The path to the file to read.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustList.ReadUserTrustedListFrom(System.IO.Stream)">
            <summary>
            Reads a list of user trusted addins from the specified stream and adds them to the <see cref="T:Narumikazuchi.Extensibility.IAddInTrustList"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustList.RemoveFromUserTrustedList(System.Guid@)">
            <summary>
            Removes the specified <see cref="T:System.Guid"/> from the list of user trusted AddIns.
            </summary>
            <param name="guid">The guid to remove.</param>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustList.WriteUserTrustedListTo(System.IO.FileInfo)">
            <summary>
            Writes the current list of user trusted addins to the specified file.
            </summary>
            <param name="file">The file to write to.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustList.WriteUserTrustedListTo(System.String)">
            <summary>
            Writes the current list of user trusted addins to the specified file.
            </summary>
            <param name="filePath">The path to the file to write to.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Narumikazuchi.Extensibility.IAddInTrustList.WriteUserTrustedListTo(System.IO.Stream)">
            <summary>
            Writes the current list of user trusted addins to the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
    </members>
</doc>
